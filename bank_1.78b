;==============================================================================
; BANK 1
;------------------------------------------------------------------------------
; Game Initialization, extra code and graphics, sounds
;==============================================================================
        incgraphic gfx/sprites/font_spr.png 160A 3 0 1
        incgraphic gfx/sprites/bar0.png 160A 0 1
        incgraphic gfx/sprites/bar1.png 160A 0 2 1
        incgraphic gfx/sprites/bar2.png 160A 0 2 1
        incgraphic gfx/sprites/bar3.png 160A 0 2 1
        incgraphic gfx/sprites/bar4.png 160A 0 2 1
        incgraphic gfx/sprites/bar5.png 160A 0 2 1
        incgraphic gfx/sprites/bar6.png 160A 0 2 1
        incgraphic gfx/sprites/bar7.png 160A 0 2 1
        incgraphic gfx/sprites/bar8.png 160A 0 2 1
        incgraphic gfx/sprites/hp.png 160B 0 3 7 8 1 2
        incgraphic gfx/sprites/mp.png 160A 0 3 1
        incgraphic gfx/sprites/coin.png 160A 0 3 2
        incgraphic gfx/sprites/prism.png 160A 0 3 2 1
        incgraphic gfx/sprites/chimkin.png 160A 0 3 1 2
        incgraphic gfx/sprites/torch0.png 160B 0 1 2 3 6 5 4
        incgraphic gfx/sprites/torch1.png 160B 0 1 2 3 5 6 4
        incgraphic gfx/sprites/torch2.png 160B 0 1 2 3 6 4 5
        incgraphic gfx/sprites/torch3.png 160B 0 1 2 6 4 5
        incgraphic gfx/sprites/potion0.png 160A 0 2 3 1
        incgraphic gfx/sprites/armor0.png 160A 0 2 1
        incgraphic gfx/sprites/rosary.png 160A 0 3 2 1
        incgraphic gfx/sprites/relic0.png 160A 0 2 3 1
        incgraphic gfx/sprites/relic1.png 160A 0 1 2 3
        incgraphic gfx/sprites/relic2.png 160A 0 3 2 1
        incgraphic gfx/sprites/map0.png 160A 0 3 2 1
        incgraphic gfx/sprites/door0.png 160A 0 1 2 3
        incgraphic gfx/sprites/door1.png 160A 0 1 2 3
        incgraphic gfx/sprites/key0.png 160A 0 3 1

init
        goto title_init bank10

tileset_transition
        tileset = exit_tileset
        first_load = 1
clear_menu_map
        asm
          ldx #100       ; menu_map_room array + 2 to clear menu_map_revealed and exit_tileset as well
          lda #0
          sta entered_save_room
          sta old_tileset
tranloop  sta exit_tileset,x
          dex
          bpl tranloop
          rts
end

load_map
        clearscreen
        gosub clear_palettes
        displaymode 160A
        adjustvisible 0 14
        if exit_tileset then gosub tileset_transition
        asm
          lda #0
          sta in_save_room
end
        if tileset = T_FOREST then gosub load_forest bank2
        if tileset = T_CASTLE then gosub load_castle bank4
        if tileset = T_RIVER  then gosub load_river bank6
        gosub draw_hud
draw_pickup_hud
        Xposition = 36
        for index = 0 to 13
        Xposition = Xposition + 6              
        PLOTSPRITE font_spr 0 Xposition 208 0
        next
map_loaded
        savescreen
        gosub update_hp_bar
        gosub update_mp_bar
        if !save_objects then gosub load_objects
        asm
        lda #0
        sta reload_map
        sta save_objects
        sta player_obscure
        sta pw_success
end
        if exit_dir = EXIT_SOUTH then player_Ypos = 15  : player_Ydir = DIR_DOWN
        if exit_dir = EXIT_NORTH then player_Ypos = 175 : player_Ydir = DIR_UP
        if exit_dir = EXIT_EAST  then player_Xpos = 147 : player_Xdir = DIR_LEFT
        if exit_dir = EXIT_WEST  then player_Xpos = 7  : player_Xdir = DIR_RIGHT

main
        drawscreen
        if switchreset then reboot
        if !switchselect then select_debounce = 0
        if !switchpause then pause_debounce = 0
        if !joy0fire0 && action_button = 0 then action_debounce = 0
        if !joy0fire0 && action_button = 1 then menu_debounce = 0
        if !joy0fire1 && action_button = 1 then action_debounce = 0
        if !joy0fire1 && action_button = 0 then menu_debounce = 0
        if !joy0left then left_debounce = 0
        if !joy0right then right_debounce = 0
        if !joy0up then up_debounce = 0
        if !joy0down then down_debounce = 0
        ; menu code prevents these from overflowing
        if joy0left then left_debounce = left_debounce + 1
        if joy0right then right_debounce = right_debounce + 1 
        if joy0up then up_debounce = up_debounce + 1
        if joy0down then down_debounce = down_debounce + 1
        if switchselect && !select_debounce then gosub swap_action_button
main_animation_timer
        animation_timer = animation_timer + 1
        if animation_timer > ANIM_TIME then animation_timer = 0
        ; Currently only two frames of animation supported. Needs to be changed if more than 2
        animation_frame = 0
        if animation_timer > (ANIM_TIME / 2) then animation_frame = 1

main_lightning
    asm
        lda lightning_timer
        beq lightning_flash
        dec lightning_timer
        bne lightning_done
lightning_flash
        dec lightning_delay
        lda lightning_delay
        bne lightning_done
        jsr randomize
        bmi lightning_done
        lda #LIGHTNING_FRAMES
        sta lightning_timer
lightning_done
end

main_pal_animation
        if !pal_animation then main_pal_done
        if !animation_frame then main_pal_done
        ; cycle the 8th palette every animation frame
        temp7 = sP7C3
        sP7C3  = sP7C2
        sP7C2  = sP7C1
        sP7C1  = temp7
        P7C1 = sP7C1
        P7C2 = sP7C2
        P7C3 = sP7C3
main_pal_done

main_state_handler
        if game_state = STATE_TITLE then title_handler
        if game_state = STATE_FIELD then field_handler
        if game_state = STATE_MENU  then menu_handler
        goto main

plot_player
        ; Plot the player, their shield, and sword if attacking
        if player_obscure then plot_hud
        if player_state = STATE_ATTACK && player_sword then plotsprite sword0 sword_pal sword_Xpos sword_Ypos sword_frame

        ; plot shield behind player if facing up/right
        if player_facing = DIR_UP || player_facing = DIR_RIGHT then gosub plot_player_shield
plot_johanna
        if player_flags{1} then plotsprite joswim0 0 player_Xpos player_Ypos player_frame else plotsprite heroine0 0 player_Xpos player_Ypos player_frame
        if player_facing = DIR_DOWN || player_facing = DIR_LEFT then gosub plot_player_shield

plot_hud
        asm
          ldx zone1_objects
          ldy #0
          SetObjectImageLo hp_bar_1
          inx
          ldy #0
          SetObjectImageLo hp_bar_2
          inx
          ldy #0
          SetObjectImageLo hp_bar_3
          inx
          ldy #0
          SetObjectImageLo hp_bar_4
          inx
          ldy #0
          SetObjectImageLo hp_bar_5
          inx
          ldy #0
          SetObjectImageLo hp_bar_6
          ldx zone2_objects
          ldy #1
          SetObjectImageLo mp_bar_1
          inx
          ldy #1
          SetObjectImageLo mp_bar_2
          inx
          ldy #1
          SetObjectImageLo mp_bar_3
          inx
          ldy #1
          SetObjectImageLo mp_bar_4
          inx
          ldy #1
          SetObjectImageLo mp_bar_5
          inx
          ldy #1
          SetObjectImageLo mp_bar_6
end
        if debug_hud then gosub plot_debug_hud


; Currently disabled due to needing more space in shared graphics block,
; floatsprite relies on DMA holes and HUD graphics are now stored below $8000
float_sprites
        goto main
;        asm
;          floatsprite 0,ZONE0ADDRESS,1
;          floatsprite 0,ZONE0ADDRESS,2
;          floatsprite 0,ZONE0ADDRESS,3
;          floatsprite 0,ZONE0ADDRESS,4
;          floatsprite 0,ZONE0ADDRESS,5
;          floatsprite 0,ZONE0ADDRESS,6
;          floatsprite 0,ZONE0ADDRESS,7
;          floatsprite 1,ZONE1ADDRESS,1
;          floatsprite 1,ZONE1ADDRESS,2
;          floatsprite 1,ZONE1ADDRESS,3
;          floatsprite 1,ZONE1ADDRESS,4
;          floatsprite 1,ZONE1ADDRESS,5
;          floatsprite 1,ZONE1ADDRESS,6
;          floatsprite 1,ZONE1ADDRESS,7
;end
;        goto main

plot_player_shield
        if player_state = STATE_DEATH || player_state = STATE_CHANT then return thisbank

        if player_shield then plotsprite shield0 shield_pal shield_Xpos shield_Ypos shield_frame
        return thisbank

kill_player
        player_frame = FRAME_DEATH
        if !fade_count then fade_count = 60
        goto cc_next

; Player death jumps here. It fades the screen to black, then waits out the rest of the fade count
death_fade
        if !fade then fade_done
        fade = fade - 1
fade_done
        fade_count = fade_count - 1
        if !fade_count then password_display
        goto player_handler_done

save_room_handler
        gosub encode_password
password_display
        menu = MENU_GAMEOVER
        menu_debounce = 1
        pause_debounce = 1
        action_debounce = 1
        goto menu_init bank3

encode_password
        asm
        lda tileset
        sta pw_tileset
        lda save_room_index
        sta pw_saveroom
        lda player_sword
        sta pw_sword
        lda player_shield
        sta pw_shield
        lda player_armor
        sta pw_armor
        lda player_charm
        sta pw_charm
        lda m_item_bits_1
        sta pw_inventory_1
        lda m_item_bits_2
        sta pw_inventory_2
        lda m_spell_bits_1
        sta pw_spells_1
        lda m_spell_bits_2
        sta pw_spells_2
        lda m_sword_bits_1
        sta pw_swords_1
        lda m_sword_bits_2
        sta pw_swords_2
        lda m_shield_bits_1
        sta pw_shields_1
        lda m_shield_bits_2
        sta pw_shields_2
        lda m_armor_bits_1
        sta pw_armor_1
        lda m_armor_bits_2
        sta pw_armor_2
        lda m_charm_bits_1
        sta pw_charms_1
        lda m_charm_bits_2
        sta pw_charms_2
        lda m_relic_bits_1
        sta pw_relics_1
        lda m_relic_bits_2
        sta pw_relics_2
        lda m_map_bits
        sta pw_index20
        lda m_key_bits
        sta pw_index21
        lda #0
        sta pw_index22
        jsr .calculate_pw_checksum
        sta pw_checksum

encode_font_offset
        lda pw_index0,x
        clc
        adc #PW_0
        sta pw_index0,x
        inx
        cpx #24
        bne encode_font_offset
        lda #24
        sta pw_index
end
        savememory pw_index0-pw_index
        return thisbank

decode_password
        asm
        ldx #0
decode_font_offset
        lda pw_index0,x
        sec
        sbc #PW_0
        sta pw_index0,x
        inx
        cpx #24
        bne decode_font_offset

        jsr .calculate_pw_checksum
        cmp pw_checksum
        beq write_to_gamestate
        jsr encode_font_offset         ; reencode the font for display if the password fails
        lda #$E0
        sta pw_error
        rts

write_to_gamestate
        lda pw_tileset
        sta tileset
        lda pw_saveroom
        sta save_room_index
        lda pw_sword
        sta player_sword
        lda pw_shield
        sta player_shield
        lda pw_armor
        sta player_armor
        lda pw_charm
        sta player_charm
        lda pw_inventory_1
        sta m_item_bits_1
        lda pw_inventory_2
        sta m_item_bits_2
        lda pw_spells_1
        sta m_spell_bits_1
        lda pw_spells_2
        sta m_spell_bits_2
        lda pw_swords_1
        sta m_sword_bits_1
        lda pw_swords_2
        sta m_sword_bits_2
        lda pw_shields_1
        sta m_shield_bits_1
        lda pw_shields_2
        sta m_shield_bits_2
        lda pw_armor_1
        sta m_armor_bits_1
        lda pw_armor_2
        sta m_armor_bits_2
        lda pw_charms_1
        sta m_charm_bits_1
        lda pw_charms_2
        sta m_charm_bits_2
        lda pw_relics_1
        sta m_relic_bits_1
        lda pw_relics_2
        sta m_relic_bits_2
        lda pw_index20
        sta m_map_bits
        lda pw_index21
        sta m_key_bits
        lda #1
        sta pw_success
        rts
end

calculate_pw_checksum
        asm
        lda pw_tileset
        clc
        adc pw_saveroom
        adc pw_sword
        adc pw_shield
        adc pw_armor
        adc pw_charm
        adc pw_inventory_1
        adc pw_inventory_2
        adc pw_spells_1
        adc pw_spells_2
        adc pw_swords_1
        adc pw_swords_2
        adc pw_shields_1
        adc pw_shields_2
        adc pw_armor_1
        adc pw_armor_2
        adc pw_charms_1
        adc pw_charms_2
        adc pw_relics_1
        adc pw_relics_2
        adc pw_index20
        adc pw_index21
        adc pw_index22
        and #$1F
        rts
end

password_to_buffer
        asm
        ldx #24
pw_buffer_loop
        lda pw_index0,x
        sta pw_buffer,x
        dex
        bpl pw_buffer_loop
        rts
end

buffer_to_password
        asm
        ldx #24
buffer_pw_loop
        lda pw_buffer,x
        sta pw_index0,x
        dex
        bpl buffer_pw_loop
        rts
end

plot_gameover
        menu = MENU_GAMEOVER
        if !menu_change then goto gameover_updater
        clearscreen
        gosub disable_double_wide_mode
        gosub plot_menu_border
        menu_change = 0
        menu_selection = 0
        menu_columns = 1
        characterset menu_font
        alphachars '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz -!&[$#]{}(_*)'
        if in_save_room then plotchars 'Password' 0 64 2 singlewide : goto gameover_options
        plotchars 'GAME  OVER' 0 60 2 singlewide
gameover_options
        plotchars 'Continue' 0 60 9 singlewide
        plotchars 'Quit' 0 60 10 singlewide
        savescreen

gameover_updater
        restorescreen
        gosub plot_password
        plotsprite menu_cursor0 0 menu_cursor_X menu_cursor_Y

gameover_controls
        if !action_debounce && joy0fire0 && action_button = 0 then gameover_input
        if !action_debounce && joy0fire1 && action_button = 1 then gameover_input

        if up_debounce >= MENU_TAP_FRAMES then gosub menu_selection_up
        if !up_debounce && joy0up then gosub menu_selection_up
        if down_debounce >= MENU_TAP_FRAMES then gosub menu_selection_down
        if !down_debounce && joy0down then gosub menu_selection_down
        if menu_selection > 1 then menu_selection = 0
        menu_cursor_X = 56
        if !menu_selection then menu_cursor_Y = 144 : goto main
        menu_cursor_Y = 160
        goto main

gameover_input
        if menu_selection then menu_selection = 0 : menu_change = 1 : goto title_init bank10
        gosub decode_password
        in_save_room = 0
        menu = MENU_MAIN
        goto title_continue bank10

plot_password_menu
        ; turn on Kangaroo mode so "Password Error" prints over saved screen
        sCTRL{2} = 1 : CTRL = sCTRL
        menu = MENU_PASSWORD
        if !menu_change then goto password_menu_updater
        clearscreen
        gosub disable_double_wide_mode
        gosub calc_inv_array
        ; gosub encode_password
        gosub password_to_buffer
        gosub plot_menu_border
        menu_change = 0
        menu_selection = 0
        menu_max = 40
        menu_columns = 13
        plotchars 'Enter Password' 0 52 2 singlewide
        plotchars '0 1 2 3 4 5 6 7 8 9 Erase' 0 28 9 singlewide
        plotchars 'A B C D E F G H I J K L M' 0 28 10 singlewide
        plotchars 'N O P Q R S T U V W X Y Z' 0 28 11 singlewide
        plotchars 'Confirm  Exit'             0 84 12 singlewide
        savescreen

password_menu_updater
        restorescreen
        gosub plot_password
        plotsprite menu_cursor0 0 menu_cursor_X menu_cursor_Y
        ; $E0 is a checksum error code set by the decode subroutine
        if !pw_error then goto password_menu_controls
        plotchars 'Password Error' 0 52 2 singlewide
        ; used to detect if cursor is moved after displaying error
        prev_menu_selection = menu_selection

password_menu_controls
        if !menu_debounce && joy0fire0 && action_button = 1 then pw_backspace
        if !menu_debounce && joy0fire1 && action_button = 0 then pw_backspace
        ; Pause is a quickie way of getting back to the action
        if !pause_debounce && switchpause then gosub buffer_to_password : goto close_menu
        if !action_debounce && joy0fire0 && action_button = 0 then encode_sel_to_pw
        if !action_debounce && joy0fire1 && action_button = 1 then encode_sel_to_pw
        gosub menu_dirs

password_menu_dirs_done
        ; set by decode password subroutine
        if pw_success = 1 then goto init_field bank10
        ; clear the Password Error message if the cursor was moved
        if menu_selection <> prev_menu_selection then pw_error = 0
        ; Handles the Erase option spanning multiple columns
        if menu_selection > 39 then menu_selection = 40
        if menu_selection = 11 then menu_selection = 10
        if menu_selection = 12 then menu_selection = 10
        if menu_selection < 13 then menu_cursor_X = 24 + (menu_selection * 8) : goto password_menu_cursor_Y
        if menu_selection < 26 then menu_cursor_X = 24 + ((menu_selection - 13) * 8) : goto password_menu_cursor_Y
        menu_cursor_X = 24 + ((menu_selection - 26) * 8)
password_menu_cursor_Y
        menu_cursor_Y = 144
        if menu_selection > 12 then menu_cursor_Y = 160
        if menu_selection > 25 then menu_cursor_Y = 176
        if menu_selection = 39 then menu_cursor_X = 80 : menu_cursor_Y = MENU_EQUIP_EXIT_Y
        if menu_selection = 40 then menu_cursor_X = 116 : menu_cursor_Y = MENU_EQUIP_EXIT_Y
        goto main

encode_sel_to_pw
        pw_error = 0
        action_debounce = 1
        temp1 = PW_0
        if menu_selection > 10 then temp1 = PW_A        ; "Erase" spans 3 colums, font offset needs to change
        if menu_selection = 10 then pw_backspace                        ; Erase
        if menu_selection = 39 then gosub decode_password : goto main   ; Confirm
        if menu_selection = 40 then menu_selection = 0 : menu_change = 1 : goto title_init bank10 ; Exit
        pw_index0[pw_index] = menu_selection + temp1
        pw_index = pw_index + 1
        if pw_index > 24 then pw_index = 24
        goto password_menu_dirs_done

pw_backspace
        pw_error = 0
        menu_debounce = 1
        if pw_index > 24 then pw_index = 24
        pw_index = pw_index - 1
        ; replace with dash character
        pw_index0[pw_index] = 82
        if pw_index > 23 then pw_index = 0
        goto main

plot_password
        plotchars pw_index0 0 52 3 6 singlewide
        plotchars pw_index6 0 84 3 6 singlewide
        plotchars pw_index12 0 52 4 6 singlewide
        plotchars pw_index18 0 84 4 6 singlewide
        return thisbank

        data inv_bits
        %00000001, %00000010, %00000100, %00001000, %00010000
end

prep_inv_bits
        if temp1 >= 5 then prep_bits_2
        temp1 = inv_bits[temp1]
        temp2 = 0
        return
prep_bits_2
        temp1 = temp1 - 5
        temp2 = inv_bits[temp1]
        temp1 = 0
        return

pickup_map
        temp1 = temp1 - TYPE_MAP1
        pickup_ptr_lo = pickup_maps_lo[temp1]
        pickup_ptr_hi = pickup_maps_hi[temp1]
        gosub prep_inv_bits
add_map
        m_map_bits = m_map_bits | temp1
        goto kill_object

pickup_key
        temp1 = temp1 - TYPE_KEY1
        pickup_ptr_lo = pickup_keys_lo[temp1]
        pickup_ptr_hi = pickup_keys_hi[temp1]
        gosub prep_inv_bits
add_key
        m_key_bits = m_key_bits | temp1
        goto kill_object

pickup_spell
        temp1 = temp1 - TYPE_SPELL1
        pickup_ptr_lo = pickup_spells_lo[temp1]
        pickup_ptr_hi = pickup_spells_hi[temp1]
        gosub prep_inv_bits
add_spell
        m_spell_bits_1 = m_spell_bits_1 | temp1
        m_spell_bits_2 = m_spell_bits_2 | temp2
        goto kill_object

pickup_item
        temp1 = temp1 - TYPE_ITEM1
        ; quanities start at 1, not 0, to simplify menu code
        temp2 = temp1 + 1
        m_item_qty[temp2] = m_item_qty[temp2] + 1
        ; cap at 9 so we don't need to deal with BCD and so qty can be stored in a nibble
        if m_item_qty[temp2] >= 9 then m_item_qty[temp2] = 9
        pickup_ptr_lo = pickup_items_lo[temp1]
        pickup_ptr_hi = pickup_items_hi[temp1]
        gosub prep_inv_bits
add_item
        m_item_bits_1 = m_item_bits_1 | temp1
        m_item_bits_2 = m_item_bits_2 | temp2
        goto kill_object

pickup_sword
        temp1 = temp1 - TYPE_SWORD1
        pickup_ptr_lo = pickup_swords_lo[temp1]
        pickup_ptr_hi = pickup_swords_hi[temp1]
        gosub prep_inv_bits
add_sword
        m_sword_bits_1 = m_sword_bits_1 | temp1
        m_sword_bits_2 = m_sword_bits_2 | temp2
        goto kill_object

pickup_shield
        temp1 = temp1 - TYPE_SHIELD1
        pickup_ptr_lo = pickup_shields_lo[temp1]
        pickup_ptr_hi = pickup_shields_hi[temp1]
        gosub prep_inv_bits
add_shield
        m_shield_bits_1 = m_shield_bits_1 | temp1
        m_shield_bits_2 = m_shield_bits_2 | temp2
        goto kill_object

pickup_armor
        temp1 = temp1 - TYPE_ARMOR1
        pickup_ptr_lo = pickup_armor_lo[temp1]
        pickup_ptr_hi = pickup_armor_hi[temp1]
        gosub prep_inv_bits
add_armor
        m_armor_bits_1 = m_armor_bits_1 | temp1
        m_armor_bits_2 = m_armor_bits_2 | temp2
        goto kill_object

pickup_charm
        temp1 = temp1 - TYPE_CHARM1
        pickup_ptr_lo = pickup_charms_lo[temp1]
        pickup_ptr_hi = pickup_charms_hi[temp1]
        gosub prep_inv_bits
add_charm
        m_charm_bits_1 = m_charm_bits_1 | temp1
        m_charm_bits_2 = m_charm_bits_2 | temp2
        goto kill_object

pickup_relic
        temp1 = temp1 - TYPE_RELIC1
        pickup_ptr_lo = pickup_relics_lo[temp1]
        pickup_ptr_hi = pickup_relics_hi[temp1]
        gosub prep_inv_bits
add_relic
        m_relic_bits_1 = m_relic_bits_1 | temp1
        m_relic_bits_2 = m_relic_bits_2 | temp2
        goto kill_object

set_locked_string
        pickup_ptr_lo = door_locked_lo
        pickup_ptr_hi = door_locked_hi
        goto cc_next

;==============================================================================
; SUBROUTINE: LOAD OBJECTS
;------------------------------------------------------------------------------
; Fills all 16 object slots with type and position data from ROM,
; then interates through each type to set object properties
; Utilizes pointers so multiple maps can reuse the same object data if desired
;==============================================================================
load_objects
        asm
        ldx #MAX_OBJECTS
        lda #0
clear_obj_loop
        sta object_type,x
        sta object_Xpos,x
        sta object_Ypos,x
        sta object_Xvel_lo,x
        sta object_Xvel_hi,x
        sta object_Yvel_lo,x
        sta object_Yvel_hi,x
        sta object_Xdir,x
        sta object_Ydir,x
        sta object_facing,x
        sta object_frame,x
        sta object_state,x
        sta object_speed_lo,x
        sta object_speed_hi,x
        sta object_vel_cap_lo,x
        sta object_vel_cap_hi,x
        sta object_friction_lo,x
        sta object_friction_hi,x
        sta object_hp,x
        sta object_damage,x
        sta object_elem_atk,x
        sta object_def,x
        sta object_mdef,x
        sta object_elem_def,x
        sta object_parent,x
        sta object_flags,x
        sta object_timer,x
        sta object_dest,x
        sta object_hop_dir,x
        sta object_pal,x
        dex
        bne clear_obj_loop
        sta temp1
        ; failsafe for objects without sprite pointer
        lda #<.plot_next
        sta object_spr_ptr_lo,x
        lda #>.plot_next
        sta object_spr_ptr_hi,x
end
        for obj_index = 1 to MAX_MAP_OBJECTS
        object_type[obj_index] = pointer[[temp1]]
        if !object_type[obj_index] then object_familiars
        temp1 = temp1 + 1
        object_Xpos[obj_index] = pointer[[temp1]]
        temp1 = temp1 + 1
        object_Ypos[obj_index] = pointer[[temp1]]
        temp1 = temp1 + 1
        next

object_familiars
        if m_relic_bits_1{0} then object_type[13] = TYPE_F_FAIRY
        ; TODO: pointer table for stats as well
object_stats
        for obj_index = 1 to MAX_OBJECTS
        if !object_type[obj_index] then next_obj_stats
        if object_type[obj_index] = TYPE_WOLF then obj_wolf_stats
        if object_type[obj_index] = TYPE_TORCH then obj_torch_stats
        if object_type[obj_index] = TYPE_SLIME then obj_slime_stats
        if object_type[obj_index] = TYPE_MSLIME then obj_slime_stats : object_hp[obj_index] = MSLIME_HP : object_def[obj_index] = MSLIME_DEF
        if object_type[obj_index] = TYPE_RSLIME then obj_redslime_stats
        if object_type[obj_index] = TYPE_MRSLIME then obj_redslime_stats : object_hp[obj_index] = MRSLIME_HP : object_def[obj_index] = MRSLIME_DEF
        if object_type[obj_index] = TYPE_RAVEN then obj_raven_stats
        if object_type[obj_index] = TYPE_PRIEST then obj_priest_stats
        if object_type[obj_index] = TYPE_SKELETON then obj_skel_stats
        if object_type[obj_index] = TYPE_GHOST then obj_ghost_stats
        if object_type[obj_index] = TYPE_RGHOST then obj_rghost_stats
        if object_type[obj_index] = TYPE_MERMAN then obj_nix_stats
        if object_type[obj_index] = TYPE_OCTOPUS then obj_octo_stats
        if object_type[obj_index] = TYPE_F_FAIRY then obj_fairy_stats
        if object_type[obj_index] = TYPE_WARG then obj_warg_stats

obj_next_stats
        next
        ; load_objects runs directly into remove_duplicates to remove any objects placed on map by default

;==============================================================================
; SUBROUTINE: REMOVE DUPLICATES
;------------------------------------------------------------------------------
; Goes through bit-by-bit and removes or substitutes
; items the player already has in their inventory
;==============================================================================
remove_duplicates
        item_spawned = 0
        for index = 1 to MAX_OBJECTS
        if object_type[index] >= TYPE_CHARM1 then check_charm_bits
        if object_type[index] >= TYPE_ARMOR1 then check_armor_bits
        if object_type[index] >= TYPE_SHIELD1 then check_shield_bits
        if object_type[index] >= TYPE_SWORD1 then check_sword_bits
        if object_type[index] >= TYPE_RELIC1 then check_relic_bits
        if object_type[index] >= TYPE_SPELL1 then check_spell_bits
        if object_type[index] >= TYPE_MAP1 then check_map_bits
remove_duplicates_next
        next
        return thisbank

check_map_bits
        if object_type[index] = TYPE_KEY1 && m_key_bits{0} then object_type[index] = 0
        if object_type[index] = TYPE_KEY2 && m_key_bits{1} then object_type[index] = 0
        if object_type[index] = TYPE_KEY3 && m_key_bits{2} then object_type[index] = 0 
        if object_type[index] = TYPE_KEY4 && m_key_bits{3} then object_type[index] = 0 
        if object_type[index] = TYPE_KEY5 && m_key_bits{4} then object_type[index] = 0 
        if object_type[index] = TYPE_MAP1 && m_map_bits{0} then object_type[index] = 0 
        if object_type[index] = TYPE_MAP2 && m_map_bits{1} then object_type[index] = 0 
        if object_type[index] = TYPE_MAP3 && m_map_bits{2} then object_type[index] = 0 
        if object_type[index] = TYPE_MAP4 && m_map_bits{3} then object_type[index] = 0 
        if object_type[index] = TYPE_MAP5 && m_map_bits{4} then object_type[index] = 0 
        goto remove_duplicates_next

check_spell_bits
        if object_type[index] = TYPE_SPELL1 && m_spell_bits_1{0} then object_type[index] = 0
        if object_type[index] = TYPE_SPELL2 && m_spell_bits_1{1} then object_type[index] = 0
        if object_type[index] = TYPE_SPELL3 && m_spell_bits_1{2} then object_type[index] = 0 
        if object_type[index] = TYPE_SPELL4 && m_spell_bits_1{3} then object_type[index] = 0 
        if object_type[index] = TYPE_SPELL5 && m_spell_bits_1{4} then object_type[index] = 0 
        if object_type[index] = TYPE_SPELL6 && m_spell_bits_2{0} then object_type[index] = 0 
        if object_type[index] = TYPE_SPELL7 && m_spell_bits_2{1} then object_type[index] = 0 
        if object_type[index] = TYPE_SPELL8 && m_spell_bits_2{2} then object_type[index] = 0 
        if object_type[index] = TYPE_SPELL9 && m_spell_bits_2{3} then object_type[index] = 0 
        if object_type[index] = TYPE_SPELL10 && m_spell_bits_2{4} then object_type[index] = 0 
        goto remove_duplicates_next

check_relic_bits
        if object_type[index] = TYPE_RELIC1 && m_relic_bits_1{0} then object_type[index] = 0
        if object_type[index] = TYPE_RELIC2 && m_relic_bits_1{1} then object_type[index] = 0
        if object_type[index] = TYPE_RELIC3 && m_relic_bits_1{2} then object_type[index] = 0 
        if object_type[index] = TYPE_RELIC4 && m_relic_bits_1{3} then object_type[index] = 0 
        if object_type[index] = TYPE_RELIC5 && m_relic_bits_1{4} then object_type[index] = 0 
        if object_type[index] = TYPE_RELIC6 && m_relic_bits_2{0} then object_type[index] = 0 
        if object_type[index] = TYPE_RELIC7 && m_relic_bits_2{1} then object_type[index] = 0 
        if object_type[index] = TYPE_RELIC8 && m_relic_bits_2{2} then object_type[index] = 0 
        if object_type[index] = TYPE_RELIC9 && m_relic_bits_2{3} then object_type[index] = 0 
        if object_type[index] = TYPE_RELIC10 && m_relic_bits_2{4} then object_type[index] = 0 
        goto remove_duplicates_next

check_sword_bits
        if object_type[index] = TYPE_SWORD1 && m_sword_bits_1{0} then object_type[index] = 0
        if object_type[index] = TYPE_SWORD2 && m_sword_bits_1{1} then object_type[index] = TYPE_ELIXIR ; Bone Scimitar
        if object_type[index] = TYPE_SWORD3 && m_sword_bits_1{2} then object_type[index] = 0 
        if object_type[index] = TYPE_SWORD4 && m_sword_bits_1{3} then object_type[index] = 0 
        if object_type[index] = TYPE_SWORD5 && m_sword_bits_1{4} then object_type[index] = 0 
        if object_type[index] = TYPE_SWORD6 && m_sword_bits_2{0} then object_type[index] = 0 
        if object_type[index] = TYPE_SWORD7 && m_sword_bits_2{1} then object_type[index] = 0 
        if object_type[index] = TYPE_SWORD8 && m_sword_bits_2{2} then object_type[index] = 0 
        if object_type[index] = TYPE_SWORD9 && m_sword_bits_2{3} then object_type[index] = 0 
        if object_type[index] = TYPE_SWORD10 && m_sword_bits_2{4} then object_type[index] = 0 
        goto remove_duplicates_next

check_shield_bits
        if object_type[index] = TYPE_SHIELD1 && m_shield_bits_1{0} then object_type[index] = 0
        if object_type[index] = TYPE_SHIELD2 && m_shield_bits_1{1} then object_type[index] = TYPE_POTION ; Skull Shield
        if object_type[index] = TYPE_SHIELD3 && m_shield_bits_1{2} then object_type[index] = 0 
        if object_type[index] = TYPE_SHIELD4 && m_shield_bits_1{3} then object_type[index] = 0 
        if object_type[index] = TYPE_SHIELD5 && m_shield_bits_1{4} then object_type[index] = 0 
        if object_type[index] = TYPE_SHIELD6 && m_shield_bits_2{0} then object_type[index] = 0 
        if object_type[index] = TYPE_SHIELD7 && m_shield_bits_2{1} then object_type[index] = 0 
        if object_type[index] = TYPE_SHIELD8 && m_shield_bits_2{2} then object_type[index] = 0 
        if object_type[index] = TYPE_SHIELD9 && m_shield_bits_2{3} then object_type[index] = 0 
        if object_type[index] = TYPE_SHIELD10 && m_shield_bits_2{4} then object_type[index] = 0 
        goto remove_duplicates_next

check_armor_bits
        if object_type[index] = TYPE_ARMOR1 && m_armor_bits_1{0} then object_type[index] = 0
        if object_type[index] = TYPE_ARMOR2 && m_armor_bits_1{1} then object_type[index] = 0
        if object_type[index] = TYPE_ARMOR3 && m_armor_bits_1{2} then object_type[index] = 0 
        if object_type[index] = TYPE_ARMOR4 && m_armor_bits_1{3} then object_type[index] = 0 
        if object_type[index] = TYPE_ARMOR5 && m_armor_bits_1{4} then object_type[index] = 0 
        if object_type[index] = TYPE_ARMOR6 && m_armor_bits_2{0} then object_type[index] = 0 
        if object_type[index] = TYPE_ARMOR7 && m_armor_bits_2{1} then object_type[index] = 0 
        if object_type[index] = TYPE_ARMOR8 && m_armor_bits_2{2} then object_type[index] = 0 
        if object_type[index] = TYPE_ARMOR9 && m_armor_bits_2{3} then object_type[index] = 0 
        if object_type[index] = TYPE_ARMOR10 && m_armor_bits_2{4} then object_type[index] = 0 
        goto remove_duplicates_next

check_charm_bits
        if object_type[index] = TYPE_CHARM1 && m_charm_bits_1{0} then object_type[index] = 0
        if object_type[index] = TYPE_CHARM2 && m_charm_bits_1{1} then object_type[index] = TYPE_ELIXIR ; Dark Talisman
        if object_type[index] = TYPE_CHARM3 && m_charm_bits_1{2} then object_type[index] = 0 
        if object_type[index] = TYPE_CHARM4 && m_charm_bits_1{3} then object_type[index] = 0 
        if object_type[index] = TYPE_CHARM5 && m_charm_bits_1{4} then object_type[index] = 0 
        if object_type[index] = TYPE_CHARM6 && m_charm_bits_2{0} then object_type[index] = 0 
        if object_type[index] = TYPE_CHARM7 && m_charm_bits_2{1} then object_type[index] = 0 
        if object_type[index] = TYPE_CHARM8 && m_charm_bits_2{2} then object_type[index] = 0 
        if object_type[index] = TYPE_CHARM9 && m_charm_bits_2{3} then object_type[index] = 0 
        if object_type[index] = TYPE_CHARM10 && m_charm_bits_2{4} then object_type[index] = 0 
        goto remove_duplicates_next

obj_torch_stats
        object_hp[obj_index] = 1
        asm
          ldx obj_index
          lda #<.plot_torch
          sta object_spr_ptr_lo,x
          lda #>.plot_torch
          sta object_spr_ptr_hi,x
end
        goto obj_next_stats

magic_collision
        inline magic_collision.asm

cast_fireball
        m_spell_bits_1{0} = 1
        playsfx sfx_bubbleup
        asm
        lda #FIREBALL_MP_COST
        sta mp_change
        jsr .test_spell_cost
        bne .load_fireball_index
        jmp .test_joy_done ; allow player to try a different input
.load_fireball_index
        ldx #14
        ldy #0  ; player index
load_fireball_data
        lda #TYPE_FIREBALL
        sta object_type,x
        lda #FIREBALL_SPEED_HI
        sta object_vel_cap_hi,x
        sta object_speed_hi,x
        lda #FIREBALL_SPEED_LO
        sta object_vel_cap_lo,x
        sta object_speed_lo,x
        lda #FIREBALL_DAMAGE
        sta object_damage,x
        lda #%00010000
        sta object_flags,x
        lda #<.plot_fireball
        sta object_spr_ptr_lo,x
        lda #>.plot_fireball
        sta object_spr_ptr_hi,x
set_cast_direction
        lda player_facing,y
        cmp #DIR_UP
        beq cast_fireball_up
        cmp #DIR_DOWN
        beq cast_fireball_down
        cmp #DIR_LEFT
        bne cast_fireball_right
        jmp cast_fireball_left
cast_fireball_right
        sta object_facing,x
        sta object_Xdir,x
        lda player_Xpos,y
        clc
        adc #14
        sta object_Xpos,x
        lda player_Ypos,y
        sta object_Ypos,x
        lda object_speed_hi,x
        sta object_Xvel_hi,x
        lda object_speed_lo,x
        sta object_Xvel_lo,x
        lda #0
        sta object_Yvel_hi,x
        sta object_Yvel_lo,x
        rts
cast_fireball_up
        sta object_facing,x
        sta object_Ydir,x
        lda player_Xpos,y
        clc
        adc #2
        sta object_Xpos,x
        lda player_Ypos,y
        sec
        sbc #10
        sta object_Ypos,x
        lda #0
        sta object_Xvel_hi,x
        sta object_Xvel_lo,x
        lda object_speed_lo,x
        sta object_Yvel_lo,x
        lda object_speed_hi,x
        sta object_Yvel_hi,x
        rts
cast_fireball_down
        sta object_facing,x
        sta object_Ydir,x
        lda player_Xpos,y
        clc
        adc #2
        sta object_Xpos,x
        lda player_Ypos,y
        clc
        adc #10
        sta object_Ypos,x
        lda #0
        sta object_Xvel_hi,x
        sta object_Xvel_lo,x
        lda object_speed_lo,x
        sta object_Yvel_lo,x
        lda object_speed_hi,x
        sta object_Yvel_hi,x
        rts
cast_fireball_left
        sta object_facing,x
        sta object_Xdir,x
        lda player_Xpos,y
        sec
        sbc #8
        sta object_Xpos,x
        lda player_Ypos,y
        sta object_Ypos,x
        lda object_speed_hi,x
        sta object_Xvel_hi,x
        lda object_speed_lo,x
        sta object_Xvel_lo,x
        lda #0
        sta object_Yvel_hi,x
        sta object_Yvel_lo,x
        rts
end

;==============================================================================
; FAIRY FAMILIAR
;------------------------------------------------------------------------------
; The Fairy doesn't engage in combat but can use healing items on Johanna
;==============================================================================
fairy_ai
        timer = timer + 1
        if timer < FAIRY_ITEM_TIME then fairy_move
        timer = 0

fairy_pick_item
        ; prioritize curing status effects
        if player_state = STATE_DEATH && m_item_qty[10] then temp2 = 10 : goto  fairy_revive
        if player_status{3} && m_item_qty[9] then temp1 = MASK_STONE  : temp2 = 9 : goto fairy_use_heal
        if player_status{0} && m_item_qty[6] then temp1 = MASK_POISON : temp2 = 6 : goto fairy_use_heal
        if player_status{1} && m_item_qty[7] then temp1 = MASK_DARK   : temp2 = 7 : goto fairy_use_heal
        if player_status{2} && m_item_qty[8] then temp1 = MASK_CURSE  : temp2 = 8 : goto fairy_use_heal
        if player_hp < PLAYER_HP_QUARTER && m_item_qty[2] then temp2 = 2 : goto fairy_use_hipotion
        if player_hp < PLAYER_HP_HALF && m_item_qty[1] then temp2 = 1 : goto fairy_use_potion
        if player_mp < PLAYER_MP_QUARTER && m_item_qty[4] then temp2 = 4 : goto fairy_use_hiether
        if player_mp < PLAYER_MP_HALF && m_item_qty[3] then temp2 = 3 : goto fairy_use_ether
        ; TODO: should the fairy use Elixirs?
        goto fairy_item_done

fairy_item_used
        ; temp2 holds the number of the item used
        asm
          ldx temp2
          dec m_item_qty,x
end
        ; remove any zero quantity items from inventory
        if animation_frame then frame = F_FAIRY_ITEM2 else frame = F_FAIRY_ITEM1
        gosub check_item_qtys
        playsfx sfx_bubbleup

fairy_item_done

fairy_move
        if animation_frame then frame = F_FAIRY_WING2 else frame = F_FAIRY_WING1
        temp1 = Xposition - 24
        if temp1 > Xposition then temp1 = 0
        temp2 = Yposition - 32
        if temp2 > Yposition then temp2 = 0
        goto followplayer

fairy_revive
        ; undo the actions taken by the death handler
        player_state = STATE_STAND
        hp_change = PLAYER_HP_MAX
        gosub increase_player_hp
        fade_count = 0
        goto fairy_item_used

fairy_use_heal
        asm
          lda player_status
          and temp1
          sta player_status
end
        goto fairy_item_used

fairy_use_hipotion
        hp_change = HP_CHANGE_HIPOTION
        gosub increase_player_hp
        goto fairy_item_used

fairy_use_potion
        hp_change = HP_CHANGE_POTION
        gosub increase_player_hp
        goto fairy_item_used

fairy_use_hiether
        mp_change = MP_CHANGE_XETHER
        gosub increase_player_mp
        goto fairy_item_used

fairy_use_ether
        mp_change = MP_CHANGE_ETHER
        gosub increase_player_mp
        goto fairy_item_used

obj_fairy_stats
        object_hp[obj_index] = FAIRY_HP
        object_vel_cap_hi[obj_index] = FAIRY_VEL_CAP_HI
        object_vel_cap_lo[obj_index] = FAIRY_VEL_CAP_LO
        object_damage[obj_index] = FAIRY_DAMAGE
        object_def[obj_index] = FAIRY_DEF
        object_mdef[obj_index] = FAIRY_MDEF
        object_friction_hi[obj_index] = FAIRY_FRICTION_HI
        object_friction_lo[obj_index] = FAIRY_FRICTION_LO
        object_speed_hi[obj_index] = FAIRY_SPEED_HI
        object_speed_lo[obj_index] = FAIRY_SPEED_LO
        object_flags[obj_index] = 0
        object_Xpos[obj_index] = player_Xpos
        object_Ypos[obj_index] = player_Ypos - 8
        object_flags[obj_index] = %00000100
        asm
          ldx obj_index
          lda #<.plot_fairy
          sta object_spr_ptr_lo,x
          lda #>.plot_fairy
          sta object_spr_ptr_hi,x
end
        goto obj_next_stats

plot_fairy
        plotsprite fairy0 0 Xposition Yposition frame
        goto plot_next

check_item_qtys
        if !m_item_qty[1] then m_item_bits_1{0} = 0
        if !m_item_qty[2] then m_item_bits_1{1} = 0
        if !m_item_qty[3] then m_item_bits_1{2} = 0
        if !m_item_qty[4] then m_item_bits_1{3} = 0
        if !m_item_qty[5] then m_item_bits_1{4} = 0
        if !m_item_qty[6] then m_item_bits_2{0} = 0
        if !m_item_qty[7] then m_item_bits_2{1} = 0
        if !m_item_qty[8] then m_item_bits_2{2} = 0
        if !m_item_qty[9] then m_item_bits_2{3} = 0
        if !m_item_qty[10] then m_item_bits_2{4} = 0
        return thisbank


swap_action_button
        select_debounce = 1
        ; if the player is actively using the action button, don't swap
        ; (shouldn't happen often since it's a console switch)
        if player_state >= STATE_ATTACK then return thisbank
        if action_button then action_button = 0 : return thisbank
        action_button = 1 : return thisbank

topscreenroutine
        ; without this extra wsync, there's a line of wrong color drawn at the top of the screen
        WSYNC=1
        if game_state = STATE_MENU then set_menu_top_pal
        WSYNC=1
        setfade fade
        BACKGRND=getfade(bg_color, black)
        if game_state = STATE_TITLE then set_title_top_pal
        return thisbank

bottomscreenroutine
        if game_state = STATE_MENU then BACKGRND = $10 : return
        BACKGRND=$00
        if game_state = STATE_TITLE then set_title_bottom_pal
        flash_color = $00
        if player_state = STATE_CHANT && animation_timer > ANIM_TIME / 2 then flash_color = CHANT_COLOR
        ; flash the screen border
        BACKGRND = flash_color
        if tileset = T_CASTLE then hair_flash   ; Cathedral tileset uses black as BG, not C1
        P4C1     = flash_color
        P5C1     = flash_color
        P6C1     = flash_color
        ; can't flash the animated palette
        if pal_animation then hair_flash
        P7C1     = flash_color
hair_flash
        ; Johanna's hair
        if game_state = STATE_FIELD then P1C1 = getfade(HAIR_COLOR, black)
        if player_state = STATE_CHANT && animation_timer > ANIM_TIME / 2 then P1C1 = CHANT_COLOR
        white_value = getfade(PAL_WHITE)
        if !white_value then white_value = WHITE_DARKNESS
        return thisbank

clear_palettes
        BACKGRND = $00
        P0C1 = $00 : P0C2 = $00 : P0C3 = $00
        P1C1 = $00 : P1C2 = $00 : P1C3 = $00
        P2C1 = $00 : P2C2 = $00 : P2C3 = $00
        P3C1 = $00 : P3C2 = $00 : P3C3 = $00
        P4C1 = $00 : P4C2 = $00 : P4C3 = $00
        P5C1 = $00 : P5C2 = $00 : P5C3 = $00
        P6C1 = $00 : P6C2 = $00 : P6C3 = $00
        P7C1 = $00 : P7C2 = $00 : P7C3 = $00
        return

        data f_key_pals
        0, 3, 0, 0, 0, 0
end

        data f_spell_pals
        0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0
end

        data f_item_pals
        0, 3, 3, 0, 0, 0, 2, 0, 1, 2, 2
end

        data f_relic_pals
        0, 0, 0, 0, 0, 1, 3, 2, 2, 2, 2
end

        data f_relic_frames
        0, 0, 0, 0, 0, 1, 2
end

        data f_sword_pals
        0, 2, 0, 1, 0, 2, 2, 2, 2, 2, 2
end

        data f_shield_pals
        0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0
end

        data f_armor_pals
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
end

        data f_charm_pals
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
end

        incbasic sounds.78b

        dmahole 0
        incbasic music.78b
        inline hiscore.asm
        inline updateobjects.asm
        inline floatsprite.asm
        inline fourbitfade.asm

ledge_hop
        asm
        lda Xdirection
        cmp #DIR_LEFT
        beq hop_left
        cmp #DIR_RIGHT
        beq hop_right
        ; must be down
hop_down
        lda timer
        bne hop_down_up
        lda #16
        sta timer
        lda Yposition
        clc
        adc #16
        sta hop_dest
hop_down_up
        cmp #8
        bcc hop_down_down
        dec Yposition
        dec timer
        rts
hop_down_down
        inc Yposition
        lda hop_dest
        cmp Yposition
        beq hop_done
        rts

hop_left
        lda timer
        bne hop_left_up
        lda #12
        sta timer
        lda Xposition
        sec
        sbc #12
        sta hop_dest
hop_left_up
        cmp #6
        bcc hop_left_down
        dec Yposition
        dec Xposition
        dec timer
        rts
hop_left_down
        inc Yposition
        dec Xposition
        lda hop_dest
        cmp Xposition
        beq hop_done
        rts

hop_right
        lda timer
        bne hop_right_up
        lda #12
        sta timer
        lda Xposition
        clc
        adc #12
        sta hop_dest
hop_right_up
        cmp #6
        bcc hop_right_down
        dec Yposition
        inc Xposition
        dec timer
        rts
hop_right_down
        inc Yposition
        inc Xposition
        lda hop_dest
        cmp Xposition
        beq hop_done
        rts

hop_done
        lda #0
        sta flags
        sta timer
        sta hop_dest
        rts
end

set_enemy_name
        ; if an item was collected, don't overwrite its string
        if item_pickup then return thisbank
        ; can't see enemy names without the fairy scroll
        if !m_relic_bits_1{4} then return thisbank
        ; include only monsters
        asm
          ldx index
          lda object_type,x
          cmp #TYPE_SPAWNER
          bcc set_name_ptr
          rts
set_name_ptr
          lda object_type,x
          tax
          lda enemy_names_lo,x
          sta pickup_ptr_lo
          lda enemy_names_hi,x
          sta pickup_ptr_hi
          lda #PICKUP_TIME
          sta new_pickup
          sta pickup_timer
          rts
end

update_pickup_objs
        ; unrolled for speed
        asm
        ldx zone14_objects
        ldy #13
        SetObjectImageLo pickup_string
        inx
        ldy #13
        SetObjectImageLo pickup_string+1
        inx
        ldy #13
        SetObjectImageLo pickup_string+2
        inx
        ldy #13
        SetObjectImageLo pickup_string+3
        inx
        ldy #13
        SetObjectImageLo pickup_string+4
        inx
        ldy #13
        SetObjectImageLo pickup_string+5
        inx
        ldy #13
        SetObjectImageLo pickup_string+6
        inx
        ldy #13
        SetObjectImageLo pickup_string+7
        inx
        ldy #13
        SetObjectImageLo pickup_string+8
        inx
        ldy #13
        SetObjectImageLo pickup_string+9
        inx
        ldy #13
        SetObjectImageLo pickup_string+10
        inx
        ldy #13
        SetObjectImageLo pickup_string+11
        inx
        ldy #13
        SetObjectImageLo pickup_string+12
        inx
        ldy #13
        SetObjectImageLo pickup_string+13
        inx
        ldy #13
        SetObjectImageLo pickup_string+14
        inx
        ldy #13
        SetObjectImageLo pickup_string+15
        rts
end

        incbasic fairy_scroll.78b
        incbasic item_names.78b

        alphachars '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz -!&[$#]{}(_*)`'
        alphadata relic_desc menu_font singlewide
        '                   '
        'Call Forth a Fairy '
        'Call a Witch` Cat  '
        'Call Forth a Ghost '
        'Call Forth an Owl  '
        'Learn Monster Names'
        'Traverse Water     '
        'Climb Waterfalls   '
        'Description 8      '
        'Description 9      '
        'Description 10     '
end