        incgraphic gfx/menu/menu_map.png 320A
        incgraphic gfx/menu/menu_cursor0.png 320A 0 1
        incgraphic gfx/menu/menu_font.png 320A 1 0
        incgraphic gfx/menu/menu_arrows.png 320A 1 0
        incgraphic gfx/menu/menu_bar0.png 320B 0 2
        incgraphic gfx/menu/menu_bar1.png 320B 0 3 2
        incgraphic gfx/menu/menu_bar2.png 320B 0 3 2
        incgraphic gfx/menu/menu_bar3.png 320B 0 3 2
        incgraphic gfx/menu/menu_bar4.png 320B 0 3 2
        incgraphic gfx/menu/menu_bar5.png 320B 0 3 2
        incgraphic gfx/menu/menu_bar6.png 320B 0 3 2
        incgraphic gfx/menu/menu_bar7.png 320B 0 3 2
        incgraphic gfx/menu/menu_bar8.png 320B 0 3 2
        incgraphic gfx/menu/menu_bar9.png 320B 0 2
        incgraphic gfx/menu/menu_pin.png 320B 0 3 2
        incgraphic gfx/menu/menu_s.png 320A
        incgraphic gfx/menu/menu_sword0.png 320B 2 0 3 1
        incgraphic gfx/menu/menu_sword1.png 320B 2 0 3 1
        incgraphic gfx/menu/menu_sword2.png 320B 2 0 3 1
        incgraphic gfx/menu/menu_sword3.png 320B 2 0 3 1
        incgraphic gfx/menu/menu_sword4.png 320B 2 0 3 1
        incgraphic gfx/menu/menu_shield0.png 320B 0 2 3 1
        incgraphic gfx/menu/menu_shield1.png 320B 0 2 3 1
        incgraphic gfx/menu/menu_shield2.png 320B 0 2 3 1
        incgraphic gfx/menu/menu_shield3.png 320B 0 2 3 1
        incgraphic gfx/menu/menu_shield4.png 320B 0 2 3 1
        incgraphic gfx/menu/menu_armor0.png 320B 0 2 3 1
        incgraphic gfx/menu/menu_armor1.png 320B 0 2 3 1
        incgraphic gfx/menu/menu_armor2.png 320B 0 2 3 1
        incgraphic gfx/menu/menu_armor3.png 320B 0 2 3 1
        incgraphic gfx/menu/menu_charm0.png 320B 0 2 1 3
        incgraphic gfx/menu/menu_charm1.png 320B 0 2 1 3
        incgraphic gfx/menu/menu_charm2.png 320B 0 2 1 3
        incgraphic gfx/menu/menu_charm3.png 320B 0 2 1 3
        incgraphic gfx/menu/menu_charm4.png 320B 0 2 1 3
        incgraphic gfx/menu/menu_potion0.png 320B 0 2 1 3
        incgraphic gfx/menu/menu_potion1.png 320B 0 2 1 3
        incgraphic gfx/menu/menu_potion2.png 320B 0 2 1 3

plot_menu_border
        ; TODO: Automate this drawing?
        characterset menu_font
        alphachars '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz -!&[$#]{}(_*)`'
        plotchars '&[$#$$$#$#$$#$$$#$$#$#$$$#$#$$$$#$$#$$]&' 0 0 0 singlewide
        plotchars '&{' 0   0 1 singlewide
        plotchars '}&' 0 152 1 singlewide
        plotchars '&{' 0   0 2 singlewide
        plotchars '}&' 0 152 2 singlewide
        plotchars '&{' 0   0 3 singlewide
        plotchars '}&' 0 152 3 singlewide
        plotchars '&{' 0   0 4 singlewide
        plotchars '}&' 0 152 4 singlewide
        plotchars '&{' 0   0 5 singlewide
        plotchars '}&' 0 152 5 singlewide
        plotchars '&{' 0   0 6 singlewide
        plotchars '}&' 0 152 6 singlewide
        plotchars '&{' 0   0 7 singlewide
        plotchars '}&' 0 152 7 singlewide
        plotchars '&{' 0   0 8 singlewide
        plotchars '}&' 0 152 8 singlewide
        plotchars '&{' 0   0 9 singlewide
        plotchars '}&' 0 152 9 singlewide
        plotchars '&{' 0   0 10 singlewide
        plotchars '}&' 0 152 10 singlewide
        plotchars '&{' 0   0 11 singlewide
        plotchars '}&' 0 152 11 singlewide
        plotchars '&{' 0   0 12 singlewide
        plotchars '}&' 0 152 12 singlewide
        plotchars '&(__*__*_*__*__*___*_*__*___*_*_*___*_)&' 0   0 13 singlewide
        return

menu_dirs
        prev_menu_selection = menu_selection
        if right_debounce >= MENU_TAP_FRAMES then gosub menu_selection_right
        if !right_debounce && joy0right then gosub menu_selection_right
        if left_debounce >= MENU_TAP_FRAMES then gosub menu_selection_left
        if !left_debounce && joy0left then gosub menu_selection_left
        if up_debounce >= MENU_TAP_FRAMES then gosub menu_selection_up
        if !up_debounce && joy0up then gosub menu_selection_up
        if down_debounce >= MENU_TAP_FRAMES then gosub menu_selection_down
        if !down_debounce && joy0down then gosub menu_selection_down
        return

menu_selection_right
        menu_selection = menu_selection + 1 : right_debounce = 1
        ; wrap menu selection back to zero
        if menu_selection > menu_max then menu_selection = 0
        return

menu_selection_left
        menu_selection = menu_selection - 1 : left_debounce  = 1
        ; selection underflow, wrap to last option
        if menu_selection > menu_max then menu_selection = menu_max
        return

menu_selection_down
        menu_selection = menu_selection + menu_columns : down_debounce = 1
        ; wrap menu selection back to zero
        if menu_selection > menu_max then menu_selection = 0
        return

menu_selection_up
        menu_selection = menu_selection - menu_columns : up_debounce = 1
        ; selection underflow, wrap to last option
        if menu_selection > menu_max then menu_selection = menu_max
        return

close_menu
        gosub enable_double_wide_mode
        gosub clear_palettes
        game_state = STATE_FIELD
        asm
        lda #1
        sta reload_map
        sta save_objects
        sta menu_debounce
        sta pause_debounce
        sta torch_reblock
end
        goto main ; shared palettes are now included in each tileset

set_menu_top_pal
        WSYNC = 1 : BACKGRND = $2D
        if menu = MENU_MAIN || menu = MENU_PASSWORD then return thisbank
        if menu = MENU_GAMEOVER then return thisbank
        goto equip_menu_colors
        
calc_inv_array
        ; zero the inventory arrays to prevent duplication
        for index = 0 to 66
        m_item_inv[index] = 0
        next
        ; populate arrays based on equipment bits
        ; TODO: Optimize for ROM space, this is quick and dirty...
        if m_item_bits_1{0} then m_item_inv[1] = 1
        if m_item_bits_1{1} then m_item_inv[2] = 2
        if m_item_bits_1{2} then m_item_inv[3] = 3
        if m_item_bits_1{3} then m_item_inv[4] = 4
        if m_item_bits_1{4} then m_item_inv[5] = 5
        if m_item_bits_2{0} then m_item_inv[6] = 6
        if m_item_bits_2{1} then m_item_inv[7] = 7
        if m_item_bits_2{2} then m_item_inv[8] = 8
        if m_item_bits_2{3} then m_item_inv[9] = 9
        if m_item_bits_2{4} then m_item_inv[10] = 10
        if m_sword_bits_1{0} then m_sword_inv[1] = 1
        if m_sword_bits_1{1} then m_sword_inv[2] = 2
        if m_sword_bits_1{2} then m_sword_inv[3] = 3
        if m_sword_bits_1{3} then m_sword_inv[4] = 4
        if m_sword_bits_1{4} then m_sword_inv[5] = 5
        if m_sword_bits_2{0} then m_sword_inv[6] = 6
        if m_sword_bits_2{1} then m_sword_inv[7] = 7
        if m_sword_bits_2{2} then m_sword_inv[8] = 8
        if m_sword_bits_2{3} then m_sword_inv[9] = 9
        if m_sword_bits_2{4} then m_sword_inv[10] = 10
        if m_shield_bits_1{0} then m_shield_inv[1] = 1
        if m_shield_bits_1{1} then m_shield_inv[2] = 2
        if m_shield_bits_1{2} then m_shield_inv[3] = 3
        if m_shield_bits_1{3} then m_shield_inv[4] = 4
        if m_shield_bits_1{4} then m_shield_inv[5] = 5
        if m_shield_bits_2{0} then m_shield_inv[6] = 6
        if m_shield_bits_2{1} then m_shield_inv[7] = 7
        if m_shield_bits_2{2} then m_shield_inv[8] = 8
        if m_shield_bits_2{3} then m_shield_inv[9] = 9
        if m_shield_bits_2{4} then m_shield_inv[10] = 10
        if m_armor_bits_1{0} then m_armor_inv[1] = 1
        if m_armor_bits_1{1} then m_armor_inv[2] = 2
        if m_armor_bits_1{2} then m_armor_inv[3] = 3
        if m_armor_bits_1{3} then m_armor_inv[4] = 4
        if m_armor_bits_1{4} then m_armor_inv[5] = 5
        if m_armor_bits_2{0} then m_armor_inv[6] = 6
        if m_armor_bits_2{1} then m_armor_inv[7] = 7
        if m_armor_bits_2{2} then m_armor_inv[8] = 8
        if m_armor_bits_2{3} then m_armor_inv[9] = 9
        if m_armor_bits_2{4} then m_armor_inv[10] = 10
        if m_charm_bits_1{0} then m_charm_inv[1] = 1
        if m_charm_bits_1{1} then m_charm_inv[2] = 2
        if m_charm_bits_1{2} then m_charm_inv[3] = 3
        if m_charm_bits_1{3} then m_charm_inv[4] = 4
        if m_charm_bits_1{4} then m_charm_inv[5] = 5
        if m_charm_bits_2{0} then m_charm_inv[6] = 6
        if m_charm_bits_2{1} then m_charm_inv[7] = 7
        if m_charm_bits_2{2} then m_charm_inv[8] = 8
        if m_charm_bits_2{3} then m_charm_inv[9] = 9
        if m_charm_bits_2{4} then m_charm_inv[10] = 10
        if m_relic_bits_1{0} then m_relic_inv[1] = 1
        if m_relic_bits_1{1} then m_relic_inv[2] = 2
        if m_relic_bits_1{2} then m_relic_inv[3] = 3
        if m_relic_bits_1{3} then m_relic_inv[4] = 4
        if m_relic_bits_1{4} then m_relic_inv[5] = 5
        if m_relic_bits_2{0} then m_relic_inv[6] = 6
        if m_relic_bits_2{1} then m_relic_inv[7] = 7
        if m_relic_bits_2{2} then m_relic_inv[8] = 8
        if m_relic_bits_2{3} then m_relic_inv[9] = 9
        if m_relic_bits_2{4} then m_relic_inv[10] = 10

        ; inventory-by-inventory, remove zeros
        pointer = m_item_inv_lo
        pointer_hi = m_item_inv_hi
        gosub remove_inv_zeros
        pointer = m_sword_inv_lo
        pointer_hi = m_sword_inv_hi
        gosub remove_inv_zeros
        pointer = m_shield_inv_lo
        pointer_hi = m_shield_inv_hi
        gosub remove_inv_zeros
        pointer = m_armor_inv_lo
        pointer_hi = m_armor_inv_hi
        gosub remove_inv_zeros
        pointer = m_charm_inv_lo
        pointer_hi = m_charm_inv_hi
        gosub remove_inv_zeros
        pointer = m_relic_inv_lo
        pointer_hi = m_relic_inv_hi
        ; riz_return pulls double duty as the return for calc_inv_array

remove_inv_zeros
        ; reads thru the inv array and removes any empty slots
        temp1 = 0
        for index = 1 to 10
        if !pointer[[index]] then riz_next
        pointer[[temp1]] = pointer[[index]]
        temp1 = temp1 + 1
riz_next
        next
        ; pad remaining inventory slots with zero
        for index = temp1 to 10
        pointer[[index]] = 0
        next
riz_return
        return